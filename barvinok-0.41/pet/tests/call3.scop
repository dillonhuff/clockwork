start: 120
end: 225
indent: "\t"
context: '[n] -> {  : 4*floor((n)/4) = n and 0 <= n <= 2147483647 }'
schedule: '{ domain: "[n] -> { S_0[]; S_1[i] : 4*floor((i)/4) = i and 0 <= i <= -4
  + n }", child: { sequence: [ { filter: "[n] -> { S_0[] }" }, { filter: "[n] -> {
  S_1[i] }", child: { schedule: "[n] -> L_0[{ S_1[i] -> [(i)] }]" } } ] } }'
arrays:
- context: '[n] -> {  : n >= 0 }'
  extent: '[n] -> { A[i0] : 0 <= i0 < n }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '[n] -> { S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: assume
      arguments:
      - type: access
        index: '[n] -> { S_0[] -> [(1)] }'
        reference: __pet_ref_0
        read: 1
        write: 0
- line: 12
  domain: '[n] -> { S_1[i] : 4*floor((i)/4) = i and 0 <= i <= -4 + n }'
  body:
    type: expression
    expr:
      type: call
      name: foo
      arguments:
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[n] -> { S_1[i] -> A[o0] : i <= o0 <= 3 + i }'
          may_write: '[n] -> { S_1[i] -> A[o0] : i <= o0 <= 3 + i }'
          must_write: '[n] -> { S_1[i] -> A[o0] : i <= o0 <= 3 + i }'
          index: '[n] -> { S_1[i] -> A[(i)] }'
          reference: __pet_ref_1
          read: 1
          write: 1
