start: 23
end: 100
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[]; S_2[]; S_1[] }", child: { sequence: [ { filter: "{
  S_0[] }" }, { filter: "{ S_1[] }" }, { filter: "{ S_2[] }" } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ a[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ k[] }'
  element_type: int
  element_size: 4
statements:
- line: 5
  domain: '{ S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: assume
      arguments:
      - type: op
        operation: '>='
        arguments:
        - type: access
          index: '{ S_0[] -> k[] }'
          reference: __pet_ref_0
          read: 1
          write: 0
        - type: int
          value: 0
- line: 6
  domain: '{ S_1[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[] -> k[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: op
        operation: '-'
        arguments:
        - type: int
          value: 1
- line: 7
  domain: '{ S_2[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_2[] -> a[] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: access
        index: '{ S_2[] -> [(-1)] }'
        reference: __pet_ref_3
        read: 1
        write: 0
