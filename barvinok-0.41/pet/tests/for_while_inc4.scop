start: 92
end: 239
indent: "\t"
context: '[n] -> {  : -2147483648 <= n <= 2147483647 }'
schedule: '{ domain: "[n] -> { S_2[x1, t] : 0 <= x1 < n and t >= 0; S_7[]; S2[x1,
  t] : 0 <= x1 < n and t >= 0; S1[x1] : 0 <= x1 < n; S_6[]; S_1[x1] : 0 <= x1 < n;
  R[x1] : 0 <= x1 < n; S_4[x1, t] : 0 <= x1 < n and t >= 0 }", child: { sequence:
  [ { filter: "[n] -> { S_2[x1, t]; S2[x1, t]; S1[x1]; S_1[x1]; R[x1]; S_4[x1, t]
  }", child: { schedule: "[n] -> L_0[{ S_2[x1, t] -> [(x1)]; S2[x1, t] -> [(x1)];
  S1[x1] -> [(x1)]; S_1[x1] -> [(x1)]; R[x1] -> [(x1)]; S_4[x1, t] -> [(x1)] }]",
  child: { sequence: [ { filter: "[n] -> { S1[x1] }" }, { filter: "[n] -> { S_1[x1]
  }" }, { filter: "[n] -> { S_2[x1, t]; S2[x1, t]; S_4[x1, t] }", child: { schedule:
  "[n] -> L_1[{ S_2[x1, t] -> [(t)]; S2[x1, t] -> [(t)]; S_4[x1, t] -> [(t)] }]",
  child: { sequence: [ { filter: "[n] -> { S_2[x1, t] }" }, { filter: "[n] -> { S2[x1,
  t] }" }, { filter: "[n] -> { S_4[x1, t] }" } ] } } }, { filter: "[n] -> { R[x1]
  }" } ] } } }, { filter: "[n] -> { S_7[]; S_6[] }", child: { set: [ { filter: "{
  S_6[] }" }, { filter: "{ S_7[] }" } ] } } ] } }'
arrays:
- context: '{  :  }'
  extent: '[n] -> { __pet_test_0[x1, t] : 0 <= x1 < n and t >= 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[n] -> { s[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[n] -> { x2[] }'
  element_type: int
  element_size: 4
statements:
- line: 13
  domain: '[n] -> { S1[x1] : 0 <= x1 < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S1[x1] -> s[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: f
- line: 14
  domain: '[n] -> { S_1[x1] : 0 <= x1 < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S_1[x1] -> x2[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: int
        value: 0
- line: 14
  domain: '[n] -> { [S_2[x1, t] -> [__pet_test_0 = 1]] : 0 <= x1 < n and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S_2[x1, t] -> __pet_test_0[(x1), (t)] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: call
        name: P
        arguments:
        - type: access
          index: '[n] -> { S_2[x1, t] -> [(x1)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
        - type: access
          index: '[n] -> { S_2[x1, t] -> x2[] }'
          reference: __pet_ref_5
          read: 1
          write: 0
  arguments:
  - type: access
    index: '[n] -> { S_2[x1, t] -> __pet_test_0[(x1), ((-1 + t) : t > 0)] }'
    reference: __pet_ref_2
    read: 1
    write: 0
- line: 15
  domain: '[n] -> { [S2[x1, t] -> [__pet_test_0 = 1]] : 0 <= x1 < n and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S2[x1, t] -> s[] }'
        reference: __pet_ref_7
        read: 0
        write: 1
      - type: call
        name: g
        arguments:
        - type: access
          index: '[n] -> { S2[x1, t] -> s[] }'
          reference: __pet_ref_8
          read: 1
          write: 0
  arguments:
  - type: access
    index: '[n] -> { S2[x1, t] -> __pet_test_0[(x1), (t)] }'
    reference: __pet_ref_6
    read: 1
    write: 0
- line: 14
  domain: '[n] -> { [S_4[x1, t] -> [__pet_test_0 = 1]] : 0 <= x1 < n and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        index: '[n] -> { S_4[x1, t] -> x2[] }'
        reference: __pet_ref_10
        read: 0
        write: 1
      - type: access
        index: '[n] -> { S_4[x1, t] -> [(n)] }'
        reference: __pet_ref_11
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[n] -> { S_4[x1, t] -> __pet_test_0[(x1), (t)] }'
    reference: __pet_ref_9
    read: 1
    write: 0
- line: 17
  domain: '[n] -> { R[x1] : 0 <= x1 < n }'
  body:
    type: expression
    expr:
      type: call
      name: h
      arguments:
      - type: access
        index: '[n] -> { R[x1] -> s[] }'
        reference: __pet_ref_12
        read: 1
        write: 0
- line: -1
  domain: '[n] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[n] -> { S_6[] -> s[] }'
        index: '[n] -> { S_6[] -> s[] }'
        reference: __pet_ref_13
        kill: 1
- line: -1
  domain: '[n] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[n] -> { S_7[] -> x2[] }'
        index: '[n] -> { S_7[] -> x2[] }'
        reference: __pet_ref_14
        kill: 1
implications:
- satisfied: 1
  extension: '[n] -> { __pet_test_0[x1, t] -> __pet_test_0[x1'' = x1, t''] : 0 <=
    x1 < n and 0 <= t'' <= t }'
