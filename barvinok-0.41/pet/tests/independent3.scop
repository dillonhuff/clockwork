start: 44
end: 209
indent: "\t"
context: '[n] -> {  : 0 <= n <= 1073741824 }'
schedule: '{ domain: "[n] -> { S_2[i, j] : 0 <= i < n and 0 <= j < n; S_0[i, j] :
  0 <= i < n and 0 <= j < n; S_3[i, j] : 0 <= i < n and 0 <= j < n; S_1[i, j] : 0
  <= i < n and 0 <= j < n }", child: { schedule: "[n] -> L_0[{ S_2[i, j] -> [(i)];
  S_0[i, j] -> [(i)]; S_3[i, j] -> [(i)]; S_1[i, j] -> [(i)] }]", child: { schedule:
  "[n] -> L_1[{ S_2[i, j] -> [(j)]; S_0[i, j] -> [(j)]; S_3[i, j] -> [(j)]; S_1[i,
  j] -> [(j)] }]", child: { sequence: [ { filter: "[n] -> { S_0[i, j] }" }, { filter:
  "[n] -> { S_1[i, j] }" }, { filter: "[n] -> { S_3[i, j] }" }, { filter: "[n] ->
  { S_2[i, j] }" } ] } } } }'
arrays:
- context: '{  :  }'
  extent: '[n] -> { t[] }'
  element_type: float
  element_size: 4
  declared: 1
- context: '[n] -> {  : n >= 0 }'
  extent: '[n] -> { A[i0, i1] : i0 >= 0 and 0 <= i1 < n }'
  element_type: int
  element_size: 4
- context: '[n] -> {  : n >= 0 }'
  extent: '[n] -> { B[i0, i1] : i0 >= 0 and 0 <= i1 < n }'
  element_type: int
  element_size: 4
statements:
- line: 7
  domain: '[n] -> { S_0[i, j] : 0 <= i < n and 0 <= j < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[n] -> { S_0[i, j] -> t[] }'
        index: '[n] -> { S_0[i, j] -> t[] }'
        reference: __pet_ref_0
        kill: 1
- line: 7
  domain: '[n] -> { S_1[i, j] : 0 <= i < n and 0 <= j < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S_1[i, j] -> t[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: access
        index: '[n] -> { S_1[i, j] -> [(i + j)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
- line: 8
  domain: '[n] -> { S_3[i, j] : 0 <= i < n and 0 <= j < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { [S_3[i, j] -> [i2]] -> B[(i), ((i2) : i2 >= 0)] }'
        reference: __pet_ref_4
        read: 0
        write: 1
        arguments:
        - type: access
          index: '[n] -> { S_3[i, j] -> A[(i), (j)] }'
          reference: __pet_ref_3
          read: 1
          write: 0
      - type: access
        index: '[n] -> { S_3[i, j] -> t[] }'
        reference: __pet_ref_5
        read: 1
        write: 0
- line: 7
  domain: '[n] -> { S_2[i, j] : 0 <= i < n and 0 <= j < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[n] -> { S_2[i, j] -> t[] }'
        index: '[n] -> { S_2[i, j] -> t[] }'
        reference: __pet_ref_6
        kill: 1
independences:
- filter: '[n] -> { S_2[i, j] -> S_2[i'' = i, j''] : j'' > j; S_0[i, j] -> S_1[i''
    = i, j''] : j'' > j; S_2[i, j] -> S_1[i'' = i, j''] : j'' > j; S_3[i, j] -> S_1[i''
    = i, j''] : j'' > j; S_0[i, j] -> S_2[i'' = i, j''] : j'' > j; S_3[i, j] -> S_2[i''
    = i, j''] : j'' > j; S_1[i, j] -> S_0[i'' = i, j''] : j'' > j; S_2[i, j] -> S_0[i''
    = i, j''] : j'' > j; S_0[i, j] -> S_0[i'' = i, j''] : j'' > j; S_0[i, j] -> S_3[i''
    = i, j''] : j'' > j; S_1[i, j] -> S_2[i'' = i, j''] : j'' > j; S_3[i, j] -> S_0[i''
    = i, j''] : j'' > j; S_3[i, j] -> S_3[i'' = i, j''] : j'' > j; S_1[i, j] -> S_3[i''
    = i, j''] : j'' > j; S_1[i, j] -> S_1[i'' = i, j''] : j'' > j; S_2[i, j] -> S_3[i''
    = i, j''] : j'' > j }'
  local: '{ t[] }'
