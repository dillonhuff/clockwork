start: 31
end: 104
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_3[]; S_0[]; S_2[t] : t >= 0; S_1[t] : t >= 0 }", child:
  { sequence: [ { filter: "{ S_0[] }" }, { filter: "{ S_2[t]; S_1[t] }", child: {
  schedule: "L_0[{ S_1[t] -> [(t)]; S_2[t] -> [(t)] }]", child: { sequence: [ { filter:
  "{ S_1[t] }" }, { filter: "{ S_2[t] }" } ] } } }, { filter: "{ S_3[] }" } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ A[i0] : i0 >= 0 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ i[] }'
  element_type: int
  element_size: 4
statements:
- line: 5
  domain: '{ S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[] -> i[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 5
- line: 7
  domain: '{ S_1[t] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ [S_1[t] -> [i1]] -> A[((i1) : i1 >= 0)] }'
        reference: __pet_ref_2
        read: 0
        write: 1
        arguments:
        - type: access
          index: '{ S_1[t] -> i[] }'
          reference: __pet_ref_1
          read: 1
          write: 0
      - type: int
        value: 6
- line: 8
  domain: '{ S_2[t] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_2[t] -> i[] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: int
        value: 7
- line: -1
  domain: '{ S_3[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_3[] -> i[] }'
        index: '{ S_3[] -> i[] }'
        reference: __pet_ref_4
        kill: 1
