start: 45
end: 294
indent: "\t"
context: '[N] -> {  : -2147483648 <= N <= 2147483647 }'
schedule: '{ domain: "[N] -> { S_11[t] : t >= 0; S_3[t] : t >= 0; S_8[t] : t >= 0;
  S_10[t] : t >= 0; S_12[]; S_4[t] : t >= 0; S_6[t] : N = 0 and t >= 0; S_6[t = 0]
  : N < 0 or N > 0; S_7[t] : N = 0 and t >= 0; S_1[t] : N = 0 and t >= 0; S_5[t] :
  N = 0 and t >= 0; S_5[t = 0] : N < 0 or N > 0; S_9[t] : t >= 0; S_2[t] : t >= 0;
  S_0[t] : N = 0 and t >= 0; S_0[t = 0] : N < 0 or N > 0 }", child: { sequence: [
  { filter: "[N] -> { S_1[t]; S_0[t] }", child: { schedule: "[N] -> L_0[{ S_1[t] ->
  [(t)]; S_0[t] -> [(t)] }]", child: { sequence: [ { filter: "[N] -> { S_0[t] }" },
  { filter: "[N] -> { S_1[t] }" } ] } } }, { filter: "[N] -> { S_3[t]; S_4[t]; S_2[t]
  }", child: { schedule: "L_1[{ S_4[t] -> [(t)]; S_2[t] -> [(t)]; S_3[t] -> [(t)]
  }]", child: { sequence: [ { filter: "{ S_2[t] }" }, { filter: "{ S_3[t] }" }, {
  filter: "{ S_4[t] }" } ] } } }, { filter: "[N] -> { S_6[t]; S_7[t]; S_5[t] }", child:
  { schedule: "[N] -> L_2[{ S_6[t] -> [(t)]; S_7[t] -> [(t)]; S_5[t] -> [(t)] }]",
  child: { sequence: [ { filter: "[N] -> { S_5[t] }" }, { filter: "[N] -> { S_6[t]
  }" }, { filter: "[N] -> { S_7[t] }" } ] } } }, { filter: "[N] -> { S_11[t]; S_8[t];
  S_10[t]; S_9[t] }", child: { schedule: "L_3[{ S_9[t] -> [(t)]; S_10[t] -> [(t)];
  S_8[t] -> [(t)]; S_11[t] -> [(t)] }]", child: { sequence: [ { filter: "{ S_8[t]
  }" }, { filter: "{ S_9[t] }" }, { filter: "{ S_10[t] }" }, { filter: "{ S_11[t]
  }" } ] } } }, { filter: "[N] -> { S_12[] }" } ] } }'
arrays:
- context: '{  :  }'
  extent: '[N] -> { __pet_test_0[t] : t >= 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_1[t] : N = 0 and t >= 0; __pet_test_1[t = 0] : N <
    0 or N > 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_2[t] : t >= 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_3[t] : t >= 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { a[] }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '[N] -> { S_0[t] : N = 0 and t >= 0; S_0[t = 0] : N < 0 or N > 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_0[t] -> a[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 5
- line: 13
  domain: '[N] -> { S_1[t] : N = 0 and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_1[t] -> a[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: int
        value: 6
- line: 16
  domain: '[N] -> { [S_2[t] -> [__pet_test_0 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_2[t] -> a[] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: int
        value: 5
  arguments:
  - type: access
    index: '[N] -> { S_2[t] -> __pet_test_0[((-1 + t) : t > 0)] }'
    reference: __pet_ref_2
    read: 1
    write: 0
- line: 17
  domain: '[N] -> { [S_3[t] -> [__pet_test_0 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_3[t] -> __pet_test_0[(t)] }'
        reference: __pet_ref_5
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '[N] -> { S_3[t] -> __pet_test_0[((-1 + t) : t > 0)] }'
    reference: __pet_ref_4
    read: 1
    write: 0
- line: 19
  domain: '[N] -> { [S_4[t] -> [__pet_test_0 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_4[t] -> a[] }'
        reference: __pet_ref_7
        read: 0
        write: 1
      - type: int
        value: 6
  arguments:
  - type: access
    index: '[N] -> { S_4[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_6
    read: 1
    write: 0
- line: 21
  domain: '[N] -> { [S_5[t] -> [__pet_test_1 = 1]] : N = 0 and t >= 0; [S_5[t = 0]
    -> [__pet_test_1 = 1]] : N < 0 or N > 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_5[t] -> __pet_test_1[(t)] }'
        reference: __pet_ref_9
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '[N] -> { S_5[t] -> __pet_test_1[((-1 + t) : (t = 1 and N < 0) or (t =
      1 and N > 0) or (N = 0 and t > 0))] }'
    reference: __pet_ref_8
    read: 1
    write: 0
- line: 22
  domain: '[N] -> { [S_6[t] -> [__pet_test_1 = 1]] : N = 0 and t >= 0; [S_6[t = 0]
    -> [__pet_test_1 = 1]] : N < 0 or N > 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_6[t] -> a[] }'
        reference: __pet_ref_11
        read: 0
        write: 1
      - type: int
        value: 5
  arguments:
  - type: access
    index: '[N] -> { S_6[t] -> __pet_test_1[(t)] }'
    reference: __pet_ref_10
    read: 1
    write: 0
- line: 25
  domain: '[N] -> { [S_7[t] -> [__pet_test_1 = 1]] : N = 0 and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_7[t] -> a[] }'
        reference: __pet_ref_13
        read: 0
        write: 1
      - type: int
        value: 6
  arguments:
  - type: access
    index: '[N] -> { S_7[t] -> __pet_test_1[(t)] }'
    reference: __pet_ref_12
    read: 1
    write: 0
- line: 27
  domain: '[N] -> { [S_8[t] -> [__pet_test_2 = 1, __pet_test_3 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_8[t] -> __pet_test_2[(t)] }'
        reference: __pet_ref_16
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '[N] -> { S_8[t] -> __pet_test_2[((-1 + t) : t > 0)] }'
    reference: __pet_ref_14
    read: 1
    write: 0
  - type: access
    index: '[N] -> { S_8[t] -> __pet_test_3[((-1 + t) : t > 0)] }'
    reference: __pet_ref_15
    read: 1
    write: 0
- line: 28
  domain: '[N] -> { [S_9[t] -> [__pet_test_2 = 1, __pet_test_3 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_9[t] -> a[] }'
        reference: __pet_ref_19
        read: 0
        write: 1
      - type: int
        value: 5
  arguments:
  - type: access
    index: '[N] -> { S_9[t] -> __pet_test_2[(t)] }'
    reference: __pet_ref_17
    read: 1
    write: 0
  - type: access
    index: '[N] -> { S_9[t] -> __pet_test_3[((-1 + t) : t > 0)] }'
    reference: __pet_ref_18
    read: 1
    write: 0
- line: 29
  domain: '[N] -> { [S_10[t] -> [__pet_test_2 = 1, __pet_test_3 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_10[t] -> __pet_test_3[(t)] }'
        reference: __pet_ref_22
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '[N] -> { S_10[t] -> __pet_test_2[(t)] }'
    reference: __pet_ref_20
    read: 1
    write: 0
  - type: access
    index: '[N] -> { S_10[t] -> __pet_test_3[((-1 + t) : t > 0)] }'
    reference: __pet_ref_21
    read: 1
    write: 0
- line: 31
  domain: '[N] -> { [S_11[t] -> [__pet_test_2 = 1, __pet_test_3 = 0]] : t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_11[t] -> a[] }'
        reference: __pet_ref_25
        read: 0
        write: 1
      - type: int
        value: 6
  arguments:
  - type: access
    index: '[N] -> { S_11[t] -> __pet_test_2[(t)] }'
    reference: __pet_ref_23
    read: 1
    write: 0
  - type: access
    index: '[N] -> { S_11[t] -> __pet_test_3[(t)] }'
    reference: __pet_ref_24
    read: 1
    write: 0
- line: -1
  domain: '[N] -> { S_12[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N] -> { S_12[] -> a[] }'
        index: '[N] -> { S_12[] -> a[] }'
        reference: __pet_ref_26
        kill: 1
implications:
- satisfied: 0
  extension: '{ __pet_test_0[t] -> __pet_test_0[t''] : 0 <= t'' <= t }'
- satisfied: 1
  extension: '[N] -> { __pet_test_1[t] -> __pet_test_1[t''] : N = 0 and 0 <= t'' <=
    t; __pet_test_1[t] -> __pet_test_1[t'' = 0] : t >= 0 and (N > 0 or N < 0) }'
- satisfied: 0
  extension: '{ __pet_test_3[t] -> __pet_test_3[t''] : 0 <= t'' <= t }'
- satisfied: 1
  extension: '{ __pet_test_2[t] -> __pet_test_2[t''] : 0 <= t'' <= t }'
