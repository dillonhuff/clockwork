start: 83
end: 210
indent: "\t"
context: '[n] -> {  : -2147483648 <= n <= 2147483647 }'
schedule: '{ domain: "[n] -> { S2[x, t] : 0 <= x < n and t >= 0; S_4[]; S1[x] : 0
  <= x < n; S_1[x, t] : 0 <= x < n and t >= 0; R[x] : 0 <= x < n }", child: { sequence:
  [ { filter: "[n] -> { S2[x, t]; S1[x]; S_1[x, t]; R[x] }", child: { schedule: "[n]
  -> L_0[{ S2[x, t] -> [(x)]; S1[x] -> [(x)]; S_1[x, t] -> [(x)]; R[x] -> [(x)] }]",
  child: { sequence: [ { filter: "[n] -> { S1[x] }" }, { filter: "[n] -> { S2[x, t];
  S_1[x, t] }", child: { schedule: "[n] -> L_1[{ S2[x, t] -> [(t)]; S_1[x, t] -> [(t)]
  }]", child: { sequence: [ { filter: "[n] -> { S_1[x, t] }" }, { filter: "[n] ->
  { S2[x, t] }" } ] } } }, { filter: "[n] -> { R[x] }" } ] } } }, { filter: "[n] ->
  { S_4[] }" } ] } }'
arrays:
- context: '{  :  }'
  extent: '[n] -> { __pet_test_0[x, t] : 0 <= x < n and t >= 0 }'
  value_bounds: '{ [i0] : 0 <= i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[n] -> { s[] }'
  element_type: int
  element_size: 4
statements:
- line: 12
  domain: '[n] -> { S1[x] : 0 <= x < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S1[x] -> s[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: f
- line: 13
  domain: '[n] -> { [S_1[x, t] -> [__pet_test_0 = 1]] : 0 <= x < n and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S_1[x, t] -> __pet_test_0[(x), (t)] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: call
        name: P
        arguments:
        - type: access
          index: '[n] -> { S_1[x, t] -> [(x)] }'
          reference: __pet_ref_3
          read: 1
          write: 0
        - type: access
          index: '[n] -> { S_1[x, t] -> s[] }'
          reference: __pet_ref_4
          read: 1
          write: 0
  arguments:
  - type: access
    index: '[n] -> { S_1[x, t] -> __pet_test_0[(x), ((-1 + t) : t > 0)] }'
    reference: __pet_ref_1
    read: 1
    write: 0
- line: 14
  domain: '[n] -> { [S2[x, t] -> [__pet_test_0 = 1]] : 0 <= x < n and t >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[n] -> { S2[x, t] -> s[] }'
        reference: __pet_ref_6
        read: 0
        write: 1
      - type: call
        name: g
        arguments:
        - type: access
          index: '[n] -> { S2[x, t] -> s[] }'
          reference: __pet_ref_7
          read: 1
          write: 0
  arguments:
  - type: access
    index: '[n] -> { S2[x, t] -> __pet_test_0[(x), (t)] }'
    reference: __pet_ref_5
    read: 1
    write: 0
- line: 16
  domain: '[n] -> { R[x] : 0 <= x < n }'
  body:
    type: expression
    expr:
      type: call
      name: h
      arguments:
      - type: access
        index: '[n] -> { R[x] -> s[] }'
        reference: __pet_ref_8
        read: 1
        write: 0
- line: -1
  domain: '[n] -> { S_4[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[n] -> { S_4[] -> s[] }'
        index: '[n] -> { S_4[] -> s[] }'
        reference: __pet_ref_9
        kill: 1
implications:
- satisfied: 1
  extension: '[n] -> { __pet_test_0[x, t] -> __pet_test_0[x'' = x, t''] : 0 <= x <
    n and 0 <= t'' <= t }'
