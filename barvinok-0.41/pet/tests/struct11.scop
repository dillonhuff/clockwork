start: 65
end: 127
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[]; S_2[]; S_1[] }", child: { sequence: [ { filter: "{
  S_0[] }" }, { filter: "{ S_1[] }" }, { filter: "{ S_2[] }" } ] } }'
types:
- name: s
  definition: "struct s {\n    int a;\n    int b;\n}"
arrays:
- context: '{  :  }'
  extent: '{ A[i0] : i0 >= 0 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ s[] }'
  element_type: struct s
  element_size: 8
  element_is_record: 1
  outer: 1
- context: '{  :  }'
  extent: '{ s_a[s[] -> a[]] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ s_b[s[] -> b[]] }'
  element_type: int
  element_size: 4
statements:
- line: 9
  domain: '{ S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[] -> s_a[s[] -> a[]] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 10
  domain: '{ S_1[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[] -> s_b[s[] -> b[]] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: int
        value: 1
- line: 11
  domain: '{ S_2[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ [S_2[] -> [i0]] -> A[((i0) : i0 >= 0)] }'
        reference: __pet_ref_3
        read: 0
        write: 1
        arguments:
        - type: access
          index: '{ S_2[] -> s_a[s[] -> a[]] }'
          reference: __pet_ref_2
          read: 1
          write: 0
      - type: int
        value: 5
