start: 113
end: 185
indent: "\t"
context: '[m, n] -> {  : 0 <= m <= 2147483647 and -2147483648 <= n <= 2147483647 }'
schedule: '{ domain: "[m, n] -> { S_4[i] : 0 <= i < n; S_2[i] : 0 <= i < n; S_6[i,
  i''] : 0 <= i < n and 0 <= i'' < m; S_0[i] : 0 <= i < n; S_3[i] : 0 <= i < n; S_1[i]
  : 0 <= i < n; S_5[i] : 0 <= i < n }", child: { schedule: "[n, m] -> L_0[{ S_3[i]
  -> [(i)]; S_6[i, i''] -> [(i)]; S_1[i] -> [(i)]; S_5[i] -> [(i)]; S_4[i] -> [(i)];
  S_2[i] -> [(i)]; S_0[i] -> [(i)] }]", child: { sequence: [ { filter: "[n, m] ->
  { S_0[i] }" }, { filter: "[n, m] -> { S_1[i] }" }, { filter: "[n, m] -> { S_3[i]
  }" }, { filter: "[n, m] -> { S_4[i] }" }, { filter: "[n, m] -> { S_6[i, i''] }",
  child: { schedule: "[n, m] -> L_1[{ S_6[i, i''] -> [(i'')] }]" } }, { filter: "[n,
  m] -> { S_5[i]; S_2[i] }", child: { set: [ { filter: "[n] -> { S_2[i] }" }, { filter:
  "[n] -> { S_5[i] }" } ] } } ] } } }'
arrays:
- context: '{  :  }'
  extent: '[m, n] -> { n_0[] }'
  element_type: int
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[m, n] -> { __pet_arg_0[] }'
  element_type: int
  element_size: 4
  declared: 1
- context: '[m] -> {  : m >= 0 }'
  extent: '[m, n] -> { a[i0, i1] : i0 >= 0 and 0 <= i1 < m }'
  element_type: int
  element_size: 4
statements:
- line: -1
  domain: '[m, n] -> { S_0[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[m, n] -> { S_0[i] -> n_0[] }'
        index: '[m, n] -> { S_0[i] -> n_0[] }'
        reference: __pet_ref_0
        kill: 1
- line: -1
  domain: '[m, n] -> { S_1[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[m, n] -> { S_1[i] -> n_0[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: access
        index: '[m, n] -> { S_1[i] -> [(m)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
- line: -1
  domain: '[m, n] -> { S_3[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[m, n] -> { S_3[i] -> __pet_arg_0[] }'
        index: '[m, n] -> { S_3[i] -> __pet_arg_0[] }'
        reference: __pet_ref_3
        kill: 1
- line: -1
  domain: '[m, n] -> { S_4[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[m, n] -> { S_4[i] -> __pet_arg_0[] }'
        reference: __pet_ref_4
        read: 0
        write: 1
      - type: access
        index: '[m, n] -> { S_4[i] -> [(i)] }'
        reference: __pet_ref_5
        read: 1
        write: 0
- line: 4
  domain: '[m, n] -> { S_6[i, i''] : 0 <= i < n and 0 <= i'' < m }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[m, n] -> { S_6[i, i''] -> a[(i), (i'')] }'
        reference: __pet_ref_6
        read: 0
        write: 1
      - type: int
        value: 0
- line: -1
  domain: '[m, n] -> { S_2[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[m, n] -> { S_2[i] -> n_0[] }'
        index: '[m, n] -> { S_2[i] -> n_0[] }'
        reference: __pet_ref_7
        kill: 1
- line: -1
  domain: '[m, n] -> { S_5[i] : 0 <= i < n }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[m, n] -> { S_5[i] -> __pet_arg_0[] }'
        index: '[m, n] -> { S_5[i] -> __pet_arg_0[] }'
        reference: __pet_ref_8
        kill: 1
