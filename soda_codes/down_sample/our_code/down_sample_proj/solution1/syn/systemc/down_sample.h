// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _down_sample_HH_
#define _down_sample_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "down_sample_hw_inbkb.h"

namespace ap_rtl {

struct down_sample : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > input_copy_stencil_values_V_val_V_dout;
    sc_in< sc_logic > input_copy_stencil_values_V_val_V_empty_n;
    sc_out< sc_logic > input_copy_stencil_values_V_val_V_read;
    sc_out< sc_lv<16> > hw_output_stencil_values_V_val_V_din;
    sc_in< sc_logic > hw_output_stencil_values_V_val_V_full_n;
    sc_out< sc_logic > hw_output_stencil_values_V_val_V_write;


    // Module declarations
    down_sample(sc_module_name name);
    SC_HAS_PROCESS(down_sample);

    ~down_sample();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    down_sample_hw_inbkb* hw_input_stencil_hw_s_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_copy_stencil_values_V_val_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln407_reg_451;
    sc_signal< sc_logic > hw_output_stencil_values_V_val_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > or_ln412_reg_476;
    sc_signal< sc_lv<1> > or_ln412_reg_476_pp0_iter2_reg;
    sc_signal< sc_lv<15> > indvar_flatten23_reg_124;
    sc_signal< sc_lv<14> > indvar_flatten_reg_135;
    sc_signal< sc_lv<7> > c2_0_reg_146;
    sc_signal< sc_lv<32> > addr_2_reg_157;
    sc_signal< sc_lv<7> > c3_0_reg_169;
    sc_signal< sc_lv<16> > hw_input_stencil_1_2_1_reg_446;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln407_fu_196_p2;
    sc_signal< sc_lv<1> > icmp_ln407_reg_451_pp0_iter1_reg;
    sc_signal< sc_lv<15> > add_ln407_fu_202_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<7> > select_ln408_3_fu_289_p3;
    sc_signal< sc_lv<32> > addr_fu_301_p2;
    sc_signal< sc_lv<32> > addr_reg_465;
    sc_signal< sc_lv<32> > hw_input_stencil_hw_3_fu_319_p3;
    sc_signal< sc_lv<32> > hw_input_stencil_hw_3_reg_471;
    sc_signal< sc_lv<1> > or_ln412_fu_333_p2;
    sc_signal< sc_lv<1> > or_ln412_reg_476_pp0_iter1_reg;
    sc_signal< sc_lv<7> > c3_fu_339_p2;
    sc_signal< sc_lv<14> > select_ln408_4_fu_351_p3;
    sc_signal< sc_lv<16> > p_Val2_1_load_1_reg_490;
    sc_signal< sc_lv<16> > tmp_val_V_reg_495;
    sc_signal< sc_lv<14> > p_s_reg_505;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<6> > hw_input_stencil_hw_s_address0;
    sc_signal< sc_logic > hw_input_stencil_hw_s_ce0;
    sc_signal< sc_lv<16> > hw_input_stencil_hw_s_q0;
    sc_signal< sc_lv<6> > hw_input_stencil_hw_s_address1;
    sc_signal< sc_logic > hw_input_stencil_hw_s_ce1;
    sc_signal< sc_logic > hw_input_stencil_hw_s_we1;
    sc_signal< sc_lv<32> > ap_phi_mux_addr_2_phi_fu_161_p4;
    sc_signal< sc_lv<64> > sext_ln112_fu_374_p1;
    sc_signal< sc_lv<64> > sext_ln120_fu_379_p1;
    sc_signal< sc_lv<16> > p_Val2_s_fu_72;
    sc_signal< sc_lv<16> > hw_input_stencil_1_2_fu_76;
    sc_signal< sc_lv<16> > p_Val2_1_fu_80;
    sc_signal< sc_lv<16> > ap_sig_allocacmp_p_Val2_1_load;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > trunc_ln408_fu_186_p1;
    sc_signal< sc_lv<1> > icmp_ln408_fu_213_p2;
    sc_signal< sc_lv<1> > xor_ln412_fu_190_p2;
    sc_signal< sc_lv<1> > icmp_ln409_fu_239_p2;
    sc_signal< sc_lv<1> > xor_ln408_fu_233_p2;
    sc_signal< sc_lv<7> > select_ln408_fu_219_p3;
    sc_signal< sc_lv<1> > and_ln408_fu_245_p2;
    sc_signal< sc_lv<1> > or_ln408_1_fu_257_p2;
    sc_signal< sc_lv<7> > c2_fu_251_p2;
    sc_signal< sc_lv<1> > trunc_ln408_1_fu_271_p1;
    sc_signal< sc_lv<1> > xor_ln412_2_fu_275_p2;
    sc_signal< sc_lv<1> > or_ln408_fu_227_p2;
    sc_signal< sc_lv<7> > select_ln408_1_fu_263_p3;
    sc_signal< sc_lv<1> > icmp_ln121_fu_307_p2;
    sc_signal< sc_lv<32> > add_ln121_fu_313_p2;
    sc_signal< sc_lv<1> > trunc_ln409_fu_297_p1;
    sc_signal< sc_lv<1> > select_ln408_2_fu_281_p3;
    sc_signal< sc_lv<1> > xor_ln412_1_fu_327_p2;
    sc_signal< sc_lv<14> > add_ln408_1_fu_345_p2;
    sc_signal< sc_lv<1> > icmp_ln106_fu_362_p2;
    sc_signal< sc_lv<32> > select_ln106_fu_367_p3;
    sc_signal< sc_lv<16> > add_ln31_1_fu_402_p2;
    sc_signal< sc_lv<16> > add_ln31_fu_397_p2;
    sc_signal< sc_lv<16> > p_393_fu_407_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<15> ap_const_lv15_4000;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<14> ap_const_lv14_1000;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_3E;
    static const sc_lv<32> ap_const_lv32_3D;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln121_fu_313_p2();
    void thread_add_ln31_1_fu_402_p2();
    void thread_add_ln31_fu_397_p2();
    void thread_add_ln407_fu_202_p2();
    void thread_add_ln408_1_fu_345_p2();
    void thread_addr_fu_301_p2();
    void thread_and_ln408_fu_245_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_addr_2_phi_fu_161_p4();
    void thread_ap_ready();
    void thread_ap_sig_allocacmp_p_Val2_1_load();
    void thread_c2_fu_251_p2();
    void thread_c3_fu_339_p2();
    void thread_hw_input_stencil_hw_3_fu_319_p3();
    void thread_hw_input_stencil_hw_s_address0();
    void thread_hw_input_stencil_hw_s_address1();
    void thread_hw_input_stencil_hw_s_ce0();
    void thread_hw_input_stencil_hw_s_ce1();
    void thread_hw_input_stencil_hw_s_we1();
    void thread_hw_output_stencil_values_V_val_V_blk_n();
    void thread_hw_output_stencil_values_V_val_V_din();
    void thread_hw_output_stencil_values_V_val_V_write();
    void thread_icmp_ln106_fu_362_p2();
    void thread_icmp_ln121_fu_307_p2();
    void thread_icmp_ln407_fu_196_p2();
    void thread_icmp_ln408_fu_213_p2();
    void thread_icmp_ln409_fu_239_p2();
    void thread_input_copy_stencil_values_V_val_V_blk_n();
    void thread_input_copy_stencil_values_V_val_V_read();
    void thread_or_ln408_1_fu_257_p2();
    void thread_or_ln408_fu_227_p2();
    void thread_or_ln412_fu_333_p2();
    void thread_p_393_fu_407_p2();
    void thread_select_ln106_fu_367_p3();
    void thread_select_ln408_1_fu_263_p3();
    void thread_select_ln408_2_fu_281_p3();
    void thread_select_ln408_3_fu_289_p3();
    void thread_select_ln408_4_fu_351_p3();
    void thread_select_ln408_fu_219_p3();
    void thread_sext_ln112_fu_374_p1();
    void thread_sext_ln120_fu_379_p1();
    void thread_trunc_ln408_1_fu_271_p1();
    void thread_trunc_ln408_fu_186_p1();
    void thread_trunc_ln409_fu_297_p1();
    void thread_xor_ln408_fu_233_p2();
    void thread_xor_ln412_1_fu_327_p2();
    void thread_xor_ln412_2_fu_275_p2();
    void thread_xor_ln412_fu_190_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
