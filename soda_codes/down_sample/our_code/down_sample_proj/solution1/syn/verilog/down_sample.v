// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="down_sample,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.506250,HLS_SYN_LAT=16388,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=418,HLS_SYN_LUT=602,HLS_VERSION=2019_2}" *)

module down_sample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_copy_stencil_values_V_val_V_dout,
        input_copy_stencil_values_V_val_V_empty_n,
        input_copy_stencil_values_V_val_V_read,
        hw_output_stencil_values_V_val_V_din,
        hw_output_stencil_values_V_val_V_full_n,
        hw_output_stencil_values_V_val_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_copy_stencil_values_V_val_V_dout;
input   input_copy_stencil_values_V_val_V_empty_n;
output   input_copy_stencil_values_V_val_V_read;
output  [15:0] hw_output_stencil_values_V_val_V_din;
input   hw_output_stencil_values_V_val_V_full_n;
output   hw_output_stencil_values_V_val_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_copy_stencil_values_V_val_V_read;
reg hw_output_stencil_values_V_val_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_copy_stencil_values_V_val_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln407_reg_451;
reg    hw_output_stencil_values_V_val_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] or_ln412_reg_476;
reg   [0:0] or_ln412_reg_476_pp0_iter2_reg;
reg   [14:0] indvar_flatten23_reg_124;
reg   [13:0] indvar_flatten_reg_135;
reg   [6:0] c2_0_reg_146;
reg  signed [31:0] addr_2_reg_157;
reg   [6:0] c3_0_reg_169;
reg   [15:0] hw_input_stencil_1_2_1_reg_446;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln407_fu_196_p2;
reg   [0:0] icmp_ln407_reg_451_pp0_iter1_reg;
wire   [14:0] add_ln407_fu_202_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] select_ln408_3_fu_289_p3;
wire   [31:0] addr_fu_301_p2;
reg   [31:0] addr_reg_465;
wire   [31:0] hw_input_stencil_hw_3_fu_319_p3;
reg   [31:0] hw_input_stencil_hw_3_reg_471;
wire   [0:0] or_ln412_fu_333_p2;
reg   [0:0] or_ln412_reg_476_pp0_iter1_reg;
wire   [6:0] c3_fu_339_p2;
wire   [13:0] select_ln408_4_fu_351_p3;
reg   [15:0] p_Val2_1_load_1_reg_490;
reg   [15:0] tmp_val_V_reg_495;
reg   [13:0] p_s_reg_505;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] hw_input_stencil_hw_s_address0;
reg    hw_input_stencil_hw_s_ce0;
wire   [15:0] hw_input_stencil_hw_s_q0;
wire   [5:0] hw_input_stencil_hw_s_address1;
reg    hw_input_stencil_hw_s_ce1;
reg    hw_input_stencil_hw_s_we1;
reg  signed [31:0] ap_phi_mux_addr_2_phi_fu_161_p4;
wire  signed [63:0] sext_ln112_fu_374_p1;
wire  signed [63:0] sext_ln120_fu_379_p1;
reg   [15:0] p_Val2_s_fu_72;
reg   [15:0] hw_input_stencil_1_2_fu_76;
reg   [15:0] p_Val2_1_fu_80;
reg   [15:0] ap_sig_allocacmp_p_Val2_1_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln408_fu_186_p1;
wire   [0:0] icmp_ln408_fu_213_p2;
wire   [0:0] xor_ln412_fu_190_p2;
wire   [0:0] icmp_ln409_fu_239_p2;
wire   [0:0] xor_ln408_fu_233_p2;
wire   [6:0] select_ln408_fu_219_p3;
wire   [0:0] and_ln408_fu_245_p2;
wire   [0:0] or_ln408_1_fu_257_p2;
wire   [6:0] c2_fu_251_p2;
wire   [0:0] trunc_ln408_1_fu_271_p1;
wire   [0:0] xor_ln412_2_fu_275_p2;
wire   [0:0] or_ln408_fu_227_p2;
wire   [6:0] select_ln408_1_fu_263_p3;
wire   [0:0] icmp_ln121_fu_307_p2;
wire   [31:0] add_ln121_fu_313_p2;
wire   [0:0] trunc_ln409_fu_297_p1;
wire   [0:0] select_ln408_2_fu_281_p3;
wire   [0:0] xor_ln412_1_fu_327_p2;
wire   [13:0] add_ln408_1_fu_345_p2;
wire   [0:0] icmp_ln106_fu_362_p2;
wire   [31:0] select_ln106_fu_367_p3;
wire   [15:0] add_ln31_1_fu_402_p2;
wire   [15:0] add_ln31_fu_397_p2;
wire   [15:0] p_393_fu_407_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

down_sample_hw_inbkb #(
    .DataWidth( 16 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
hw_input_stencil_hw_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hw_input_stencil_hw_s_address0),
    .ce0(hw_input_stencil_hw_s_ce0),
    .q0(hw_input_stencil_hw_s_q0),
    .address1(hw_input_stencil_hw_s_address1),
    .ce1(hw_input_stencil_hw_s_ce1),
    .we1(hw_input_stencil_hw_s_we1),
    .d1(hw_input_stencil_1_2_1_reg_446)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_2_reg_157 <= hw_input_stencil_hw_3_reg_471;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        addr_2_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_0_reg_146 <= select_ln408_3_fu_289_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c2_0_reg_146 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_0_reg_169 <= c3_fu_339_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c3_0_reg_169 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten23_reg_124 <= add_ln407_fu_202_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_124 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_135 <= select_ln408_4_fu_351_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_135 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_reg_465 <= addr_fu_301_p2;
        or_ln412_reg_476 <= or_ln412_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_1_2_1_reg_446 <= hw_input_stencil_1_2_fu_76;
        icmp_ln407_reg_451 <= icmp_ln407_fu_196_p2;
        icmp_ln407_reg_451_pp0_iter1_reg <= icmp_ln407_reg_451;
        or_ln412_reg_476_pp0_iter1_reg <= or_ln412_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_1_2_fu_76 <= ap_sig_allocacmp_p_Val2_1_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_hw_3_reg_471 <= hw_input_stencil_hw_3_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_ln412_reg_476_pp0_iter2_reg <= or_ln412_reg_476_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_1_fu_80 <= input_copy_stencil_values_V_val_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_1_load_1_reg_490 <= p_Val2_1_fu_80;
        tmp_val_V_reg_495 <= input_copy_stencil_values_V_val_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Val2_s_fu_72 <= hw_input_stencil_hw_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln412_reg_476_pp0_iter1_reg == 1'd0))) begin
        p_s_reg_505 <= {{p_393_fu_407_p2[15:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln407_fu_196_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_451 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_addr_2_phi_fu_161_p4 = hw_input_stencil_hw_3_reg_471;
    end else begin
        ap_phi_mux_addr_2_phi_fu_161_p4 = addr_2_reg_157;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_451 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_Val2_1_load = input_copy_stencil_values_V_val_V_dout;
    end else begin
        ap_sig_allocacmp_p_Val2_1_load = p_Val2_1_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_hw_s_ce0 = 1'b1;
    end else begin
        hw_input_stencil_hw_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_hw_s_ce1 = 1'b1;
    end else begin
        hw_input_stencil_hw_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_input_stencil_hw_s_we1 = 1'b1;
    end else begin
        hw_input_stencil_hw_s_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        hw_output_stencil_values_V_val_V_blk_n = hw_output_stencil_values_V_val_V_full_n;
    end else begin
        hw_output_stencil_values_V_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        hw_output_stencil_values_V_val_V_write = 1'b1;
    end else begin
        hw_output_stencil_values_V_val_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_451 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_copy_stencil_values_V_val_V_blk_n = input_copy_stencil_values_V_val_V_empty_n;
    end else begin
        input_copy_stencil_values_V_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_copy_stencil_values_V_val_V_read = 1'b1;
    end else begin
        input_copy_stencil_values_V_val_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln407_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln407_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_fu_313_p2 = ($signed(32'd1) + $signed(ap_phi_mux_addr_2_phi_fu_161_p4));

assign add_ln31_1_fu_402_p2 = (p_Val2_s_fu_72 + p_Val2_1_load_1_reg_490);

assign add_ln31_fu_397_p2 = (hw_input_stencil_hw_s_q0 + tmp_val_V_reg_495);

assign add_ln407_fu_202_p2 = (15'd1 + indvar_flatten23_reg_124);

assign add_ln408_1_fu_345_p2 = (indvar_flatten_reg_135 + 14'd1);

assign addr_fu_301_p2 = ($signed(32'd62) + $signed(ap_phi_mux_addr_2_phi_fu_161_p4));

assign and_ln408_fu_245_p2 = (xor_ln408_fu_233_p2 & icmp_ln409_fu_239_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (hw_output_stencil_values_V_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln407_reg_451 == 1'd0) & (input_copy_stencil_values_V_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (hw_output_stencil_values_V_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln407_reg_451 == 1'd0) & (input_copy_stencil_values_V_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (hw_output_stencil_values_V_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln407_reg_451 == 1'd0) & (input_copy_stencil_values_V_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln407_reg_451 == 1'd0) & (input_copy_stencil_values_V_val_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((or_ln412_reg_476_pp0_iter2_reg == 1'd0) & (hw_output_stencil_values_V_val_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c2_fu_251_p2 = (7'd1 + select_ln408_fu_219_p3);

assign c3_fu_339_p2 = (select_ln408_1_fu_263_p3 + 7'd1);

assign hw_input_stencil_hw_3_fu_319_p3 = ((icmp_ln121_fu_307_p2[0:0] === 1'b1) ? 32'd0 : add_ln121_fu_313_p2);

assign hw_input_stencil_hw_s_address0 = sext_ln112_fu_374_p1;

assign hw_input_stencil_hw_s_address1 = sext_ln120_fu_379_p1;

assign hw_output_stencil_values_V_val_V_din = p_s_reg_505;

assign icmp_ln106_fu_362_p2 = (($signed(addr_reg_465) > $signed(32'd61)) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_307_p2 = ((ap_phi_mux_addr_2_phi_fu_161_p4 == 32'd61) ? 1'b1 : 1'b0);

assign icmp_ln407_fu_196_p2 = ((indvar_flatten23_reg_124 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln408_fu_213_p2 = ((indvar_flatten_reg_135 == 14'd4096) ? 1'b1 : 1'b0);

assign icmp_ln409_fu_239_p2 = ((c3_0_reg_169 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln408_1_fu_257_p2 = (icmp_ln408_fu_213_p2 | and_ln408_fu_245_p2);

assign or_ln408_fu_227_p2 = (xor_ln412_fu_190_p2 | icmp_ln408_fu_213_p2);

assign or_ln412_fu_333_p2 = (xor_ln412_1_fu_327_p2 | select_ln408_2_fu_281_p3);

assign p_393_fu_407_p2 = (add_ln31_1_fu_402_p2 + add_ln31_fu_397_p2);

assign select_ln106_fu_367_p3 = ((icmp_ln106_fu_362_p2[0:0] === 1'b1) ? addr_2_reg_157 : addr_reg_465);

assign select_ln408_1_fu_263_p3 = ((or_ln408_1_fu_257_p2[0:0] === 1'b1) ? 7'd0 : c3_0_reg_169);

assign select_ln408_2_fu_281_p3 = ((and_ln408_fu_245_p2[0:0] === 1'b1) ? xor_ln412_2_fu_275_p2 : or_ln408_fu_227_p2);

assign select_ln408_3_fu_289_p3 = ((and_ln408_fu_245_p2[0:0] === 1'b1) ? c2_fu_251_p2 : select_ln408_fu_219_p3);

assign select_ln408_4_fu_351_p3 = ((icmp_ln408_fu_213_p2[0:0] === 1'b1) ? 14'd1 : add_ln408_1_fu_345_p2);

assign select_ln408_fu_219_p3 = ((icmp_ln408_fu_213_p2[0:0] === 1'b1) ? 7'd0 : c2_0_reg_146);

assign sext_ln112_fu_374_p1 = $signed(select_ln106_fu_367_p3);

assign sext_ln120_fu_379_p1 = addr_2_reg_157;

assign trunc_ln408_1_fu_271_p1 = c2_fu_251_p2[0:0];

assign trunc_ln408_fu_186_p1 = c2_0_reg_146[0:0];

assign trunc_ln409_fu_297_p1 = select_ln408_1_fu_263_p3[0:0];

assign xor_ln408_fu_233_p2 = (icmp_ln408_fu_213_p2 ^ 1'd1);

assign xor_ln412_1_fu_327_p2 = (trunc_ln409_fu_297_p1 ^ 1'd1);

assign xor_ln412_2_fu_275_p2 = (trunc_ln408_1_fu_271_p1 ^ 1'd1);

assign xor_ln412_fu_190_p2 = (trunc_ln408_fu_186_p1 ^ 1'd1);

endmodule //down_sample
