-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity down_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_copy_stencil_values_V_val_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    input_copy_stencil_values_V_val_V_empty_n : IN STD_LOGIC;
    input_copy_stencil_values_V_val_V_read : OUT STD_LOGIC;
    hw_output_stencil_values_V_val_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    hw_output_stencil_values_V_val_V_full_n : IN STD_LOGIC;
    hw_output_stencil_values_V_val_V_write : OUT STD_LOGIC );
end;


architecture behav of down_sample is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "down_sample,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.506250,HLS_SYN_LAT=16388,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=418,HLS_SYN_LUT=602,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_copy_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln407_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal or_ln412_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten23_reg_124 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_135 : STD_LOGIC_VECTOR (13 downto 0);
    signal c2_0_reg_146 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr_2_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_0_reg_169 : STD_LOGIC_VECTOR (6 downto 0);
    signal hw_input_stencil_1_2_1_reg_446 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln407_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_451_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_fu_202_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln408_3_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal hw_input_stencil_hw_3_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal hw_input_stencil_hw_3_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln412_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_reg_476_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c3_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln408_4_fu_351_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_1_load_1_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_val_V_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_reg_505 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal hw_input_stencil_hw_s_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal hw_input_stencil_hw_s_ce0 : STD_LOGIC;
    signal hw_input_stencil_hw_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal hw_input_stencil_hw_s_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal hw_input_stencil_hw_s_ce1 : STD_LOGIC;
    signal hw_input_stencil_hw_s_we1 : STD_LOGIC;
    signal ap_phi_mux_addr_2_phi_fu_161_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln112_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln120_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal hw_input_stencil_1_2_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_Val2_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln408_fu_186_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln408_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln412_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln408_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln408_fu_219_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln408_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln408_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln408_1_fu_271_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln412_2_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln408_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln408_1_fu_263_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln121_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln409_fu_297_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln408_2_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln412_1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln408_1_fu_345_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln106_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_1_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln31_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_393_fu_407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component down_sample_hw_inbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    hw_input_stencil_hw_s_U : component down_sample_hw_inbkb
    generic map (
        DataWidth => 16,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hw_input_stencil_hw_s_address0,
        ce0 => hw_input_stencil_hw_s_ce0,
        q0 => hw_input_stencil_hw_s_q0,
        address1 => hw_input_stencil_hw_s_address1,
        ce1 => hw_input_stencil_hw_s_ce1,
        we1 => hw_input_stencil_hw_s_we1,
        d1 => hw_input_stencil_1_2_1_reg_446);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                addr_2_reg_157 <= hw_input_stencil_hw_3_reg_471;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                addr_2_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    c2_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c2_0_reg_146 <= select_ln408_3_fu_289_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c2_0_reg_146 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    c3_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c3_0_reg_169 <= c3_fu_339_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_0_reg_169 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten23_reg_124 <= add_ln407_fu_202_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_124 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_135 <= select_ln408_4_fu_351_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_135 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                addr_reg_465 <= addr_fu_301_p2;
                or_ln412_reg_476 <= or_ln412_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hw_input_stencil_1_2_1_reg_446 <= hw_input_stencil_1_2_fu_76;
                icmp_ln407_reg_451 <= icmp_ln407_fu_196_p2;
                icmp_ln407_reg_451_pp0_iter1_reg <= icmp_ln407_reg_451;
                or_ln412_reg_476_pp0_iter1_reg <= or_ln412_reg_476;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hw_input_stencil_1_2_fu_76 <= ap_sig_allocacmp_p_Val2_1_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_196_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hw_input_stencil_hw_3_reg_471 <= hw_input_stencil_hw_3_fu_319_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln412_reg_476_pp0_iter2_reg <= or_ln412_reg_476_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_1_fu_80 <= input_copy_stencil_values_V_val_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_1_load_1_reg_490 <= p_Val2_1_fu_80;
                tmp_val_V_reg_495 <= input_copy_stencil_values_V_val_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                p_Val2_s_fu_72 <= hw_input_stencil_hw_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln412_reg_476_pp0_iter1_reg = ap_const_lv1_0))) then
                p_s_reg_505 <= p_393_fu_407_p2(15 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln407_fu_196_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln407_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln407_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln121_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_addr_2_phi_fu_161_p4));
    add_ln31_1_fu_402_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_72) + unsigned(p_Val2_1_load_1_reg_490));
    add_ln31_fu_397_p2 <= std_logic_vector(unsigned(hw_input_stencil_hw_s_q0) + unsigned(tmp_val_V_reg_495));
    add_ln407_fu_202_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(indvar_flatten23_reg_124));
    add_ln408_1_fu_345_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_135) + unsigned(ap_const_lv14_1));
    addr_fu_301_p2 <= std_logic_vector(unsigned(ap_const_lv32_3E) + unsigned(ap_phi_mux_addr_2_phi_fu_161_p4));
    and_ln408_fu_245_p2 <= (xor_ln408_fu_233_p2 and icmp_ln409_fu_239_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(input_copy_stencil_values_V_val_V_empty_n, hw_output_stencil_values_V_val_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_451, ap_enable_reg_pp0_iter3, or_ln412_reg_476_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln407_reg_451 = ap_const_lv1_0) and (input_copy_stencil_values_V_val_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(input_copy_stencil_values_V_val_V_empty_n, hw_output_stencil_values_V_val_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_451, ap_enable_reg_pp0_iter3, or_ln412_reg_476_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln407_reg_451 = ap_const_lv1_0) and (input_copy_stencil_values_V_val_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(input_copy_stencil_values_V_val_V_empty_n, hw_output_stencil_values_V_val_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_451, ap_enable_reg_pp0_iter3, or_ln412_reg_476_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln407_reg_451 = ap_const_lv1_0) and (input_copy_stencil_values_V_val_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(input_copy_stencil_values_V_val_V_empty_n, icmp_ln407_reg_451)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln407_reg_451 = ap_const_lv1_0) and (input_copy_stencil_values_V_val_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, or_ln412_reg_476_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln407_fu_196_p2)
    begin
        if ((icmp_ln407_fu_196_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_addr_2_phi_fu_161_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_451, addr_2_reg_157, hw_input_stencil_hw_3_reg_471)
    begin
        if (((icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_addr_2_phi_fu_161_p4 <= hw_input_stencil_hw_3_reg_471;
        else 
            ap_phi_mux_addr_2_phi_fu_161_p4 <= addr_2_reg_157;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_1_load_assign_proc : process(input_copy_stencil_values_V_val_V_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_451, p_Val2_1_fu_80)
    begin
        if (((icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_p_Val2_1_load <= input_copy_stencil_values_V_val_V_dout;
        else 
            ap_sig_allocacmp_p_Val2_1_load <= p_Val2_1_fu_80;
        end if; 
    end process;

    c2_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln408_fu_219_p3));
    c3_fu_339_p2 <= std_logic_vector(unsigned(select_ln408_1_fu_263_p3) + unsigned(ap_const_lv7_1));
    hw_input_stencil_hw_3_fu_319_p3 <= 
        ap_const_lv32_0 when (icmp_ln121_fu_307_p2(0) = '1') else 
        add_ln121_fu_313_p2;
    hw_input_stencil_hw_s_address0 <= sext_ln112_fu_374_p1(6 - 1 downto 0);
    hw_input_stencil_hw_s_address1 <= sext_ln120_fu_379_p1(6 - 1 downto 0);

    hw_input_stencil_hw_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hw_input_stencil_hw_s_ce0 <= ap_const_logic_1;
        else 
            hw_input_stencil_hw_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_stencil_hw_s_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hw_input_stencil_hw_s_ce1 <= ap_const_logic_1;
        else 
            hw_input_stencil_hw_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_stencil_hw_s_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln407_reg_451, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hw_input_stencil_hw_s_we1 <= ap_const_logic_1;
        else 
            hw_input_stencil_hw_s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_stencil_values_V_val_V_blk_n_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, or_ln412_reg_476_pp0_iter2_reg)
    begin
        if (((or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            hw_output_stencil_values_V_val_V_blk_n <= hw_output_stencil_values_V_val_V_full_n;
        else 
            hw_output_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_stencil_values_V_val_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_505),16));

    hw_output_stencil_values_V_val_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln412_reg_476_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln412_reg_476_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_1;
        else 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln106_fu_362_p2 <= "1" when (signed(addr_reg_465) > signed(ap_const_lv32_3D)) else "0";
    icmp_ln121_fu_307_p2 <= "1" when (ap_phi_mux_addr_2_phi_fu_161_p4 = ap_const_lv32_3D) else "0";
    icmp_ln407_fu_196_p2 <= "1" when (indvar_flatten23_reg_124 = ap_const_lv15_4000) else "0";
    icmp_ln408_fu_213_p2 <= "1" when (indvar_flatten_reg_135 = ap_const_lv14_1000) else "0";
    icmp_ln409_fu_239_p2 <= "1" when (c3_0_reg_169 = ap_const_lv7_40) else "0";

    input_copy_stencil_values_V_val_V_blk_n_assign_proc : process(input_copy_stencil_values_V_val_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_451)
    begin
        if (((icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_copy_stencil_values_V_val_V_blk_n <= input_copy_stencil_values_V_val_V_empty_n;
        else 
            input_copy_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_copy_stencil_values_V_val_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln407_reg_451, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_copy_stencil_values_V_val_V_read <= ap_const_logic_1;
        else 
            input_copy_stencil_values_V_val_V_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln408_1_fu_257_p2 <= (icmp_ln408_fu_213_p2 or and_ln408_fu_245_p2);
    or_ln408_fu_227_p2 <= (xor_ln412_fu_190_p2 or icmp_ln408_fu_213_p2);
    or_ln412_fu_333_p2 <= (xor_ln412_1_fu_327_p2 or select_ln408_2_fu_281_p3);
    p_393_fu_407_p2 <= std_logic_vector(unsigned(add_ln31_1_fu_402_p2) + unsigned(add_ln31_fu_397_p2));
    select_ln106_fu_367_p3 <= 
        addr_2_reg_157 when (icmp_ln106_fu_362_p2(0) = '1') else 
        addr_reg_465;
    select_ln408_1_fu_263_p3 <= 
        ap_const_lv7_0 when (or_ln408_1_fu_257_p2(0) = '1') else 
        c3_0_reg_169;
    select_ln408_2_fu_281_p3 <= 
        xor_ln412_2_fu_275_p2 when (and_ln408_fu_245_p2(0) = '1') else 
        or_ln408_fu_227_p2;
    select_ln408_3_fu_289_p3 <= 
        c2_fu_251_p2 when (and_ln408_fu_245_p2(0) = '1') else 
        select_ln408_fu_219_p3;
    select_ln408_4_fu_351_p3 <= 
        ap_const_lv14_1 when (icmp_ln408_fu_213_p2(0) = '1') else 
        add_ln408_1_fu_345_p2;
    select_ln408_fu_219_p3 <= 
        ap_const_lv7_0 when (icmp_ln408_fu_213_p2(0) = '1') else 
        c2_0_reg_146;
        sext_ln112_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln106_fu_367_p3),64));

        sext_ln120_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addr_2_reg_157),64));

    trunc_ln408_1_fu_271_p1 <= c2_fu_251_p2(1 - 1 downto 0);
    trunc_ln408_fu_186_p1 <= c2_0_reg_146(1 - 1 downto 0);
    trunc_ln409_fu_297_p1 <= select_ln408_1_fu_263_p3(1 - 1 downto 0);
    xor_ln408_fu_233_p2 <= (icmp_ln408_fu_213_p2 xor ap_const_lv1_1);
    xor_ln412_1_fu_327_p2 <= (trunc_ln409_fu_297_p1 xor ap_const_lv1_1);
    xor_ln412_2_fu_275_p2 <= (trunc_ln408_1_fu_271_p1 xor ap_const_lv1_1);
    xor_ln412_fu_190_p2 <= (trunc_ln408_fu_186_p1 xor ap_const_lv1_1);
end behav;
